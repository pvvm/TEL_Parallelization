header TCPheader {
    int srcport;
    int srcip;
    int dstport;
    int dstip;
    int seq;
}

event SEND {
    int time_event;
    int flow_id;
}

event ACK {
    int flow_id;
    int acknum;
    int time_event;
}

event TIMER {
    int flow_id;
}


context myContext {
    stream data;
    list<float> startTime;
    int m_Una;
    int m_Nxt;
    int m_start;
    int m_Wnd;
    int m_Iss;
    int Smss;
    int m_dupSeq;
    int m_dupAmount;
    int m_cnwd;
    int m_ssthresh;
    int m_segmentsize;
    int m_dupThreshold;
    int flow_size;
    bool timeouthappened;
    float SRTT;
    float RTTVAR;
    float RTO;
}

struct proc_out_t {
    list<event_t> event_list;
    list<pkt_t> packet_list;
}

void SendProcessor(SEND this_event, myContext ctx) {
    proc_out_t output;

    for(;
    (ctx.m_Nxt < ctx.m_Una + ctx.m_Nxt) && (ctx.m_Nxt < ctx.flow_size);
    ctx.m_Nxt = ctx.m_Nxt + ctx.m_segmentsize) {
        TCPheader th;
        th.seq = ctx.m_Iss + ctx.m_Nxt;
        pkt_t p = new_pkt();
        p.add_data(ctx.data[ctx.m_Nxt : ctx.m_Nxt + ctx.m_segmentsize]);
        p.add_hdr(th);
        output.packet_list.add(p);

        //float now = time();
        // Change this. The original code uses map.
        ctx.startTime[ctx.m_Iss + ctx.m_Nxt + ctx.m_segmentsize] = now;
    }

    return output;
}

void ACKProcessor(ACK this_event, myContext ctx) {
    // 0
    if(!ctx.timeouthappened && ctx.m_Una < this_event.acknum) {
        // 1
        //float now = time();
        float R = now - ctx.startTime[this_event.acknum];
        if (ctx.SRTT == 0) {
            // 2
            ctx.SRTT = R;
            ctx.RTTVAR = R/2;
            if(R == 35) {
                // 3
                ctx.SRTT = 5;
            } else if(R == 10){
                // 6
                ctx.SRTT = 10;
            }
            // 4
            ctx.RTTVAR = 5;
            ctx.RTO = ctx.SRTT + 4 * ctx.RTTVAR;
        }
        else if(R > 50) {
            // 10
            ctx.RTO = 5;
            ctx.SRTT = 50;
        }
        else {
            // 12
            float alpha = 1.0 / 8.0;
            float beta = 1.0 / 4.0;
            ctx.RTTVAR  = (1 - beta) * ctx.RTTVAR + beta * ctx.SRTT - R;
            ctx.SRTT = (1 - alpha) * ctx.SRTT + alpha * R;
            ctx.RTO = ctx.SRTT + 4 * ctx.RTTVAR;
        }
        ctx.idk = 10;
        // 8
        if (ctx.RTO < 1) {
            // 13
            ctx.RTO = 1;
        }
        // 14
        ctx.testing = 12;
    }
    ctx.testingggggg = 1;
    // 15
    if (ctx.m_Una < this_event.acknum) {
        // 16
        ctx.m_Wnd = ctx.m_Wnd + ctx.m_segmentsize;
        ctx.m_Una = this_event.acknum;
        //timer.restart();
        ctx.timeouthappened = false;
        ACK new_event;
        new_event.time_event = 0;
        new_event.flow_id = this_event.flow_id;
        output.event_list.add(new_event);
    }
    // 15
    return output;
}

void TIMERProcessor(TIMER this_event, myContext ctx) {
    proc_out_t output;
    ctx.timeouthappened = true;
    pkt_t p = new_pkt();
    if (ctx.m_Una < ctx.flow_size) {
        if (ctx.m_Wnd / 2 >= 1) {
            ctx.m_Wnd = ctx.m_Wnd / 2;
        } else {
            ctx.m_Wnd = 1;
        }
        TCPheader th;
        th.seq = ctx.m_Una;
        ctx.RTO = ctx.RTO * 2;
        if (ctx.RTO < 3) {
            ctx.RTO = 3.0;
        }
        p.add_data(ctx.data[ctx.m_Una : ctx.m_Una + ctx.m_segmentsize]);
        p.add_hdr(th);
    }

	output.packet_list.add(p);
    return output;
}

dispatch table {
    SEND -> {SendProcessor};
    ACK -> {ACKProcessor};
    TIMER -> {TIMERProcessor};
}